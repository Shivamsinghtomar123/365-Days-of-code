#include <vector>
#include <stack>

class Solution {
public:
    int sumSubarrayMins(std::vector<int>& arr) {
        const int mod = 1e9 + 7;
        int n = arr.size();
        std::stack<int> st; // stack to store indices of elements in non-decreasing order
        std::vector<int> left(n), right(n);

        // Compute left array: index of the previous less element for each element
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && arr[st.top()] > arr[i]) {
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        // Clear the stack for the next iteration
        while (!st.empty()) {
            st.pop();
        }

        // Compute right array: index of the next less element for each element
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = (ans + static_cast<long long>(arr[i]) * (i - left[i]) * (right[i] - i)) % mod;
        }

        return static_cast<int>(ans);
    }
};
